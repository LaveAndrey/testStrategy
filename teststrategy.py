import os
import pandas as pd
import requests
import numpy as np
import asyncio
import json
import logging
from logging.handlers import RotatingFileHandler
import sqlite3
from sqlite3 import Error
import random
import argparse
import time
import threading
from websocket import create_connection, WebSocketConnectionClosedException
from datetime import datetime
import queue
from config import *

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
loop = asyncio.get_event_loop()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logger():
    logger = logging.getLogger('trading_bot')
    logger.setLevel(logging.INFO)

    formatter = logging.Formatter(
        '%(asctime)s %(threadName)s %(levelname)s %(message)s',
        datefmt='%H:%M:%S'
    )

    file_handler = RotatingFileHandler(
        'trading_bot.log',
        maxBytes=1024 * 1024 * 5,
        backupCount=3,
        encoding='utf-8'
    )
    file_handler.setFormatter(formatter)

    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    console_handler.stream.reconfigure(encoding='utf-8', errors='replace')

    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    return logger


logger = setup_logger()


class CustomWebSocket:
    def __init__(self, symbols: list, callback, loop):
        self.symbols = symbols  # ['BTC-USDT']
        self.callback = callback
        self.loop = loop
        self._running = False
        self._ws = None
        self._lock = threading.Lock()
        self.inst_ids = [
            f"{sym}-SWAP" if INSTRUMENT_TYPE == "SWAP" else sym
            for sym in self.symbols
        ]
        now = time.time()
        self.last_data_time = {inst_id: now for inst_id in self.inst_ids}
        self._connection_thread = None
        self._monitor_thread = None
        self._ping_thread = None
        self._connect_lock = threading.Lock()
        self._reconnect_requested = False
        self._backoff_seconds = 1
        self.message_queue = queue.Queue()
        self._processing_thread = None

    def _connect(self):
        while self._running:
            with self._connect_lock:
                try:
                    logger.info("üîÑ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket OKX...")
                    logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: URL=wss://ws.okx.com:8443/ws/v5/public, timeout=30")
                    connect_start = time.time()
                    self._ws = create_connection(
                        "wss://ws.okx.com:8443/ws/v5/public",
                        timeout=30
                    )
                    connect_time = time.time() - connect_start
                    logger.info(f"‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∑–∞ {connect_time:.2f} —Å–µ–∫")
                    logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∫–µ—Ç–∞: sock={self._ws.sock}")
                    sub_args = [{"channel": "tickers", "instId": inst_id} for inst_id in self.inst_ids]
                    sub_msg = {"op": "subscribe", "args": sub_args}
                    send_start = time.time()
                    self._safe_send(sub_msg)
                    logger.info(f"üì© –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {len(self.inst_ids)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
                    now = time.time()
                    for inst_id in self.inst_ids:
                        self.last_data_time[inst_id] = now
                    logger.debug(f"–°–±—Ä–æ—à–µ–Ω—ã last_data_time: {self.last_data_time}")
                    read_attempts = 0
                    while self._running:
                        try:
                            read_attempts += 1
                            recv_start = time.time()
                            message = self._ws.recv()
                            recv_time = time.time() - recv_start
                            if message == "pong":
                                logger.debug("üèì –ü–æ–ª—É—á–µ–Ω pong-–æ—Ç–≤–µ—Ç")
                                continue
                            parse_start = time.time()
                            try:
                                data = json.loads(message)
                            except json.JSONDecodeError as e:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                                logger.debug(f"–ü—Ä–æ–±–ª–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
                                continue
                            if data.get("event") == "error":
                                error_msg = f"‚õî –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏–∫–∏: {data.get('msg')} (–∫–æ–¥: {data.get('code')})"
                                logger.error(error_msg)
                                logger.debug(f"–ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {data}")
                                self._request_reconnect()
                                break
                            if data.get("event") == "subscribe":
                                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {data.get('arg')}")
                                logger.debug(f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {data}")
                                continue
                            process_start = time.time()
                            self._handle_ws_message(data)
                        except WebSocketConnectionClosedException:
                            logger.error("‚ÄºÔ∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ WebSocket –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ")
                            logger.debug("–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:", exc_info=True)
                            break
                        except Exception as e:
                            logger.error(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
                            logger.debug("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:", exc_info=True)
                            time.sleep(0.5)
                except Exception as e:
                    logger.error(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
                    logger.debug("–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:", exc_info=True)
                    logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ WebSocket: {self._ws}")
                    logger.debug(f"–ü–æ—Ç–æ–∫ alive: {threading.current_thread().is_alive()}")
                finally:
                    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
                    self._safe_close()
                    logger.debug("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            if not self._running:
                logger.info("üõë –§–ª–∞–≥ _running=False, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞")
                break
            delay = min(self._backoff_seconds, 30)
            logger.warning(f"‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫ (backoff: {self._backoff_seconds})")
            time.sleep(delay)
            self._backoff_seconds = min(self._backoff_seconds * 2, 30)

    def _safe_send(self, obj):
        try:
            if self._ws:
                if isinstance(obj, str):
                    self._ws.send(obj)
                else:
                    self._ws.send(json.dumps(obj))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")

    def _safe_close(self):
        try:
            if self._ws:
                self._ws.close()
        except:
            pass
        finally:
            self._ws = None

    def _handle_ws_message(self, data: dict):
        if "data" not in data or "arg" not in data:
            logger.warning("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ data/arg")
            return
        inst_id = data["arg"].get("instId")
        if not inst_id:
            logger.warning("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ instId")
            return
        try:
            tick_data = data['data'][0]
            #logger.info(f"üìä –¢–∏–∫ {inst_id}: —Ü–µ–Ω–∞={tick_data['last']} –æ–±—ä—ë–º={tick_data.get('lastSz', 'N/A')}")
            with self._lock:
                prev_time = self.last_data_time.get(inst_id, 0)
                self.last_data_time[inst_id] = time.time()

            # –ü–æ–º–µ—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self.message_queue.put(data)

        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–∞: {str(e)}")
            logger.debug("–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:", exc_info=True)

    def _process_messages(self):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        while self._running:
            try:
                data = self.message_queue.get(timeout=1)
                if self.callback:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —ç—Ç–æ–º –ø–æ—Ç–æ–∫–µ
                    try:
                        new_loop = asyncio.new_event_loop()
                        asyncio.set_event_loop(new_loop)
                        new_loop.run_until_complete(self.callback(data))
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
                    finally:
                        new_loop.close()
            except queue.Empty:
                continue
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")

    def _monitor_connection(self):
        while self._running:
            try:
                now = time.time()
                stale = [iid for iid, t in self.last_data_time.items() if (now - t) > 30]
                if stale:
                    logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ {len(stale)} –ø–∞—Ä–∞–º –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥")
                    self._request_reconnect()
                time.sleep(10)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
                time.sleep(2)

    def _ping_loop(self):
        while self._running:
            try:
                if self._ws:
                    self._safe_send("ping")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ping: {str(e)}")
            time.sleep(20)

    def _request_reconnect(self):
        if self._reconnect_requested:
            return
        self._reconnect_requested = True
        self._safe_close()

    def start(self):
        if self._running:
            return
        self._running = True
        self._connection_thread = threading.Thread(target=self._connect, daemon=True)
        self._connection_thread.start()
        self._monitor_thread = threading.Thread(target=self._monitor_connection, daemon=True)
        self._monitor_thread.start()
        self._ping_thread = threading.Thread(target=self._ping_loop, daemon=True)
        self._ping_thread.start()
        self._processing_thread = threading.Thread(target=self._process_messages, daemon=True)
        self._processing_thread.start()

    def stop(self):
        self._running = False
        self._reconnect_requested = False
        self._safe_close()


class DatabaseManager:
    def __init__(self, db_file):
        logger.info("üõ¢Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DatabaseManager...")
        self.db_file = db_file
        self.conn = None
        self._initialize_db()

    def _initialize_db(self):
        try:
            logger.debug("üîß –°–æ–∑–¥–∞–Ω–∏–µ/–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...")
            self.conn = sqlite3.connect(self.db_file, check_same_thread=False)
            tables = {
                'positions': "üìä –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π",
                'trades': "üí± –¢–∞–±–ª–∏—Ü–∞ —Å–¥–µ–ª–æ–∫",
                'fiveminute_data': "‚è±Ô∏è –¢–∞–±–ª–∏—Ü–∞ –º–∏–Ω—É—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
            }
            for table, log_msg in tables.items():
                logger.debug(f"{log_msg}...")
                self.conn.execute('''
                    CREATE TABLE IF NOT EXISTS positions (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        symbol TEXT NOT NULL,
                        side TEXT NOT NULL,
                        entry_price REAL NOT NULL,
                        tp_price REAL NOT NULL,
                        sl_price REAL NOT NULL,
                        size REAL NOT NULL,
                        leverage INTEGER NOT NULL,
                        entry_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        exit_price REAL,
                        exit_time TIMESTAMP,
                        pnl REAL,
                        absolute_pnl REAL,
                        status TEXT DEFAULT 'open',
                        close_reason TEXT
                    )
                ''')
                self.conn.execute('''
                    CREATE TABLE IF NOT EXISTS trades (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        symbol TEXT NOT NULL,
                        side TEXT NOT NULL,
                        price REAL NOT NULL,
                        quantity REAL NOT NULL,
                        fee REAL NOT NULL,
                        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        position_id INTEGER,
                        FOREIGN KEY (position_id) REFERENCES positions (id)
                    )
                ''')
                self.conn.execute('''
                    CREATE TABLE IF NOT EXISTS fiveminute_data (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        symbol TEXT NOT NULL,
                        timestamp TEXT NOT NULL,
                        open REAL NOT NULL,
                        high REAL NOT NULL,
                        low REAL NOT NULL,
                        close REAL NOT NULL,
                        volume REAL NOT NULL,
                        rsi REAL,
                        macd REAL,
                        macd_signal REAL,
                        macd_hist REAL,
                        UNIQUE(symbol, timestamp)
                    )
                ''')
                self.conn.execute('''
                    CREATE TABLE IF NOT EXISTS current_indicators (
                        symbol TEXT NOT NULL,
                        tick_count INTEGER NOT NULL,
                        price REAL NOT NULL,
                        rsi REAL,
                        macd REAL,
                        macd_signal REAL,
                        macd_hist REAL,
                        updated_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        PRIMARY KEY (symbol, tick_count)
                    )
                ''')
            self.conn.commit()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Error as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ë–î: {str(e)}")
            raise

    def execute_query(self, query, params=None):
        logger.debug(f"üìù –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞: {query[:50]}...")
        try:
            cursor = self.conn.cursor()
            start_time = time.time()
            if params:
                logger.debug(f"‚Ü™Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
                cursor.execute(query, params)
            else:
                cursor.execute(query)
            exec_time = time.time() - start_time
            self.conn.commit()
            logger.debug(f"‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {exec_time:.3f} —Å–µ–∫")
            return cursor
        except Error as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
            logger.debug(f"üíæ –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {query}")
            if params:
                logger.debug(f"üíæ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
            self.conn.rollback()
            raise

    def get_open_positions(self, symbol=None):
        query = "SELECT * FROM positions WHERE status = 'open'"
        params = () if not symbol else (symbol,)
        if symbol:
            query += " AND symbol = ?"
        cursor = self.execute_query(query, params)
        return cursor.fetchall()

    def save_position(self, position_data):
        query = '''
            INSERT INTO positions 
            (symbol, side, entry_price, tp_price, sl_price, size, leverage)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        '''
        params = (
            position_data['symbol'],
            position_data['side'],
            position_data['entry_price'],
            position_data['tp_price'],
            position_data['sl_price'],
            position_data['size'],
            position_data['leverage']
        )
        cursor = self.execute_query(query, params)
        return cursor.lastrowid

    def close_position(self, position_id, exit_price, close_reason):
        cursor = self.execute_query("SELECT * FROM positions WHERE id = ?", (position_id,))
        position = cursor.fetchone()
        if not position:
            logger.error(f"–ü–æ–∑–∏—Ü–∏—è —Å ID {position_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        entry_price = position[3]
        size = position[6]
        leverage = position[7]
        if position[2] == 'buy':
            pnl = (exit_price - entry_price) / entry_price
        else:
            pnl = (entry_price - exit_price) / entry_price
        pnl *= leverage
        pnl -= 2 * FEE_RATE
        absolute_pnl = pnl * size
        query = '''
            UPDATE positions 
            SET exit_price = ?,
                exit_time = CURRENT_TIMESTAMP,
                pnl = ?,
                absolute_pnl = ?,
                status = 'closed',
                close_reason = ?
            WHERE id = ?
        '''
        params = (exit_price, pnl, absolute_pnl, close_reason, position_id)
        self.execute_query(query, params)
        return True

    def save_minute_data(self, symbol, minute_data):
        query = '''
            INSERT OR IGNORE INTO fiveminute_data 
            (symbol, timestamp, open, high, low, close, volume)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        '''
        params = (
            symbol,
            datetime.fromtimestamp(minute_data['timestamp']).strftime('%Y-%m-%d %H:%M:%S'),
            minute_data['open'],
            minute_data['high'],
            minute_data['low'],
            minute_data['close'],
            minute_data['volume']
        )
        self.execute_query(query, params)
        return True

    def update_indicators(self, symbol, timestamp, indicators):
        try:
            query = '''
                UPDATE fiveminute_data 
                SET rsi = ?, macd = ?, macd_signal = ?, macd_hist = ?
                WHERE symbol = ? AND timestamp = ?
            '''
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            timestamp_str = datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')

            params = (
                indicators['rsi'],
                indicators['macd'],
                indicators['macd_signal'],
                indicators['macd_hist'],
                symbol,
                timestamp_str
            )
            self.execute_query(query, params)
            logger.debug(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è {symbol} –Ω–∞ {timestamp_str}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {str(e)}")
            return False

    def get_last_minute(self, symbol):
        query = '''
            SELECT * FROM fiveminute_data 
            WHERE symbol = ? 
            ORDER BY timestamp DESC 
            LIMIT 1
        '''
        cursor = self.execute_query(query, (symbol,))
        return cursor.fetchone()

    def get_minutes_for_indicators(self, symbol, limit):
        query = '''
            SELECT timestamp, close 
            FROM fiveminute_data 
            WHERE symbol = ? 
            ORDER BY timestamp DESC 
            LIMit ?
        '''
        cursor = self.execute_query(query, (symbol, limit))
        return cursor.fetchall()


    def __del__(self):
        if self.conn:
            self.conn.close()


class TradingBot:
    def __init__(self, initial_balance=INITIAL_BALANCE):
        logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TradingBot...")
        self.db = DatabaseManager(DB_FILE)
        self.data = {}
        self.tick_buffer = {}
        self.current_candle = {}
        self.last_minute_time = {}
        self.tick_count = {}  # –°—á–µ—Ç—á–∏–∫ —Ç–∏–∫–æ–≤
        self.balance = initial_balance
        self.ws = None
        self.symbols = SYMBOLS  # ['BTC-USDT']
        self.last_macd = {}
        self.last_signal = {}
        self._tick_lock = threading.Lock()  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ —Ç–∏–∫–æ–≤

        for symbol in self.symbols:
            logger.debug(f"üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")
            self.data[symbol] = pd.DataFrame(columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            self.tick_buffer[symbol] = []
            self.current_candle[symbol] = None
            self.last_minute_time[symbol] = 0
            self.tick_count[symbol] = 0
            self.last_macd[symbol] = None  # –≤–º–µ—Å—Ç–æ 0
            self.last_signal[symbol] = None  # –≤–º–µ—Å—Ç–æ None

        logger.info(f"üí∞ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –±–∞–ª–∞–Ω—Å–æ–º: {self.balance:.2f} USDT")

    def get_account_balance(self):
        logger.info(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {self.balance:.2f} USDT")
        return self.balance

    def get_random_slippage(self):
        if random.random() < SLIPPAGE_PROBABILITY:
            slippage = random.uniform(-SLIPPAGE_RANGE, SLIPPAGE_RANGE)
            logger.info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–æ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ: {slippage * 100:.4f}%")
            return 1 + slippage
        return 1.0

    def calculate_rsi(self, closes, period=RSI_PERIOD):
        """
        –†–µ–∞–ª–∏–∑–∞—Ü–∏—è RSI –∫–∞–∫ –≤ TradingView (Wilder's Smoothing)
        """
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
            prices = closes.values if isinstance(closes, pd.Series) else np.array(closes)

            if len(prices) < period + 1:
                return None

            deltas = np.diff(prices)

            gains = np.where(deltas > 0, deltas, 0)
            losses = np.where(deltas < 0, -deltas, 0)

            # –ü–µ—Ä–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            avg_gain = np.mean(gains[:period])
            avg_loss = np.mean(losses[:period])

            if avg_loss == 0:
                return 100 if avg_gain > 0 else 50

            # Wilder's smoothing
            for i in range(period, len(gains)):
                avg_gain = (avg_gain * (period - 1) + gains[i]) / period
                avg_loss = (avg_loss * (period - 1) + losses[i]) / period

            rs = avg_gain / avg_loss
            rsi = 100 - (100 / (1 + rs))

            return rsi

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ RSI: {str(e)}")
            return None

    def calculate_atr(self, symbol):
        """
        –†–∞—Å—á–µ—Ç ATR –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–∏ (–ø–µ—Ä–∏–æ–¥ = ATR_PERIOD = True Range).
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–∫—Ä—ã—Ç—É—é —Å–≤–µ—á—É –∏–∑ self.data[symbol]
            if self.data[symbol].empty or len(self.data[symbol]) < 1:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–≤–µ—á–∞—Ö –¥–ª—è {symbol}")
                return None

            last_closed_candle = self.data[symbol].iloc[-1]
            true_range = last_closed_candle['high'] - last_closed_candle['low']

            logger.debug(
                f"üìä –†–∞—Å—á–µ—Ç ATR –¥–ª—è {symbol}: High={last_closed_candle['high']:.2f}, Low={last_closed_candle['low']:.2f}, True Range={true_range:.4f}")
            return true_range

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ ATR: {str(e)}")
            return None

    def calculate_macd(self, closes, fast=MACD_FAST, slow=MACD_SLOW, signal=MACD_SIGNAL):
        """
        –†–µ–∞–ª–∏–∑–∞—Ü–∏—è MACD –∫–∞–∫ –≤ TradingView
        """
        try:
            prices = closes.values if isinstance(closes, pd.Series) else np.array(closes)

            # –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Å–µ—Ö EMA
            if len(prices) < slow + signal + 10:  # –î–æ–±–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä
                return None, None, None

            # EMA —Ä–∞—Å—á–µ—Ç –∫–∞–∫ –≤ TradingView
            def calculate_ema(data, period):
                k = 2.0 / (period + 1.0)
                ema_values = [data[0]]
                for i in range(1, len(data)):
                    ema_values.append(data[i] * k + ema_values[-1] * (1 - k))
                return np.array(ema_values)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º EMA
            ema_fast = calculate_ema(prices, fast)
            ema_slow = calculate_ema(prices, slow)

            # MACD –ª–∏–Ω–∏—è (—Ä–∞–∑–Ω–∏—Ü–∞ –±—ã—Å—Ç—Ä–æ–π –∏ –º–µ–¥–ª–µ–Ω–Ω–æ–π EMA)
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç—É —á–∞—Å—Ç—å, –≥–¥–µ –æ–±–µ EMA —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            min_length = min(len(ema_fast), len(ema_slow))
            macd_line = ema_fast[-min_length:] - ema_slow[-min_length:]

            # Signal line (EMA –æ—Ç MACD –ª–∏–Ω–∏–∏)
            signal_line = calculate_ema(macd_line, signal)

            # Histogram (—Ä–∞–∑–Ω–∏—Ü–∞ MACD –∏ Signal)
            histogram = macd_line[-len(signal_line):] - signal_line

            return macd_line[-1], signal_line[-1], histogram[-1]

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ MACD: {str(e)}")
            return None, None, None

    async def handle_tick(self, message):
        try:
            inst_id = message['arg']['instId']
            tick = message['data'][0]
            logger.debug(f"üì• –ü–æ–ª—É—á–µ–Ω —Ç–∏–∫: inst_id={inst_id}, price={tick['last']}, timestamp={tick['ts']}")

            if inst_id not in self.symbols and inst_id.replace('-SWAP', '') not in self.symbols:
                logger.warning(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Ç–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞: {inst_id}")
                return

            symbol = inst_id.replace('-SWAP', '') if INSTRUMENT_TYPE == "SWAP" else inst_id

            timestamp = int(tick['ts']) // 1000
            price = float(tick['last'])
            volume = float(tick['lastSz'])

            self.tick_buffer[symbol].append({'timestamp': timestamp, 'price': price, 'volume': volume})
            if len(self.tick_buffer[symbol]) > 200:
                self.tick_buffer[symbol] = self.tick_buffer[symbol][-200:]

            if TIMEFRAME == "5m":
                candle_interval = 300
            else:
                logger.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π TIMEFRAME: {TIMEFRAME}")
                return
            dt = datetime.fromtimestamp(timestamp)
            minute = (dt.minute // 5) * 5
            current_candle_start = int(datetime(dt.year, dt.month, dt.day, dt.hour, minute).timestamp())

            if self.current_candle[symbol] is None or current_candle_start > self.last_minute_time[symbol]:
                if self.current_candle[symbol] is not None:
                    prev_candle = self.current_candle[symbol]
                    self.data[symbol] = pd.concat([self.data[symbol], pd.DataFrame([prev_candle])],
                                                  ignore_index=True)
                    self.db.save_minute_data(symbol, prev_candle)
                    logger.info(f"üïØÔ∏è –ó–∞–∫—Ä—ã—Ç–∞ —Å–≤–µ—á–∞ –¥–ª—è {symbol} –Ω–∞ {datetime.fromtimestamp(prev_candle['timestamp']).strftime('%Y-%m-%d %H:%M:%S')}")
                    await self.calculate_and_update_indicators_for_closed_candle(symbol, prev_candle['timestamp'])
                self.last_minute_time[symbol] = current_candle_start
                self.current_candle[symbol] = {
                    'timestamp': current_candle_start,
                    'open': price,
                    'high': price,
                    'low': price,
                    'close': price,
                    'volume': volume
                }
                logger.info(f"üïØÔ∏è –ù–∞—á–∞—Ç–∞ –Ω–æ–≤–∞—è —Å–≤–µ—á–∞ –¥–ª—è {symbol} –Ω–∞ {datetime.fromtimestamp(current_candle_start).strftime('%Y-%m-%d %H:%M:%S')}")
            else:
                candle = self.current_candle[symbol]
                candle['high'] = max(candle['high'], price)
                candle['low'] = min(candle['low'], price)
                candle['close'] = price
                candle['volume'] += volume
                logger.debug(
                    f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–≤–µ—á–∞ {symbol}: H={candle['high']:.2f}, L={candle['low']:.2f}, C={candle['close']:.2f}")

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–∏–∫–æ–≤ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
            with self._tick_lock:
                self.tick_count[symbol] += 1
                current_tick_count = self.tick_count[symbol]

            logger.debug(f"üìà –¢–∏–∫ #{current_tick_count} –¥–ª—è {symbol}")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∫–∞–∂–¥—ã–µ 50 —Ç–∏–∫–æ–≤
            if current_tick_count % 25 == 0:
                logger.info(f"üîç –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è {symbol} (—Ç–∏–∫ #{current_tick_count})")
                await self.process_indicators(symbol)

            await self.monitor_positions(symbol, price)

        except Exception as e:
            logger.error(f"üí£ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–∞: {str(e)}")

    async def calculate_and_update_indicators_for_closed_candle(self, symbol, candle_timestamp):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–∏"""
        try:
            logger.info(f"üìä –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–∏ {symbol}")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–≤–µ—á–µ–π –≤–∫–ª—é—á–∞—è –∑–∞–∫—Ä—ã—Ç—É—é)
            min_data_required = MACD_SLOW + MACD_SIGNAL + 20
            cursor = self.db.execute_query(
                "SELECT timestamp, close FROM fiveminute_data WHERE symbol = ? ORDER BY timestamp DESC LIMIT ?",
                (symbol, min_data_required)
            )
            data = cursor.fetchall()

            if len(data) < min_data_required:
                logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {len(data)} < {min_data_required}")
                return

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
            closes = [row[1] for row in reversed(data)]  # –í —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
            closes_series = pd.Series(closes)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            rsi = self.calculate_rsi(closes_series)
            macd, signal_line, hist = self.calculate_macd(closes_series)

            if rsi is None or macd is None:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è {symbol}")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ –ë–î
            indicators = {
                'rsi': rsi,
                'macd': macd,
                'macd_signal': signal_line,
                'macd_hist': hist
            }

            self.db.update_indicators(symbol, candle_timestamp, indicators)
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è —Å–≤–µ—á–∏ {symbol}: RSI={rsi:.2f}, MACD={macd:.4f}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–∏: {str(e)}")

    async def process_indicators(self, symbol):
        logger.debug(f"üîç –ù–∞—á–∞–ª–æ —Ä–∞—Å—á—ë—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è {symbol}")
        if self.data[symbol].empty:
            logger.debug(f"‚ö†Ô∏è –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            return
        if self.current_candle[symbol] is None:
            logger.debug(f"‚ö†Ô∏è –¢–µ–∫—É—â–∞—è —Å–≤–µ—á–∞ –¥–ª—è {symbol} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
        with self._tick_lock:
            current_tick_count = self.tick_count[symbol]

        min_data_required = MACD_SLOW + MACD_SIGNAL + 20
        historical_closes = self.data[symbol]['close'].tail(min_data_required)
        logger.debug(f"üîé –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π: {len(historical_closes)}")
        current_close = self.current_candle[symbol]['close']
        logger.debug(f"üí∏ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_close:.2f}")
        all_closes = pd.Series(list(historical_closes) + [current_close])
        logger.debug(f"üìä –í—Å–µ–≥–æ —Ç–æ—á–µ–∫ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞: {len(all_closes)}")

        if len(historical_closes) < min_data_required:
            logger.debug(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {len(historical_closes)} < {min_data_required}")
            return

        try:
            rsi = self.calculate_rsi(all_closes)
            if rsi is None:
                logger.debug(f"‚ö†Ô∏è RSI –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω")
                return

            macd, signal_line, hist = self.calculate_macd(all_closes)
            if macd is None:
                logger.debug(f"‚ö†Ô∏è MACD –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω")
                return

            logger.info(
                f"üìà –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è {symbol}: RSI={rsi:.2f}, MACD={macd:.4f}, Signal={signal_line:.4f}, Hist={hist:.4f}, Price={current_close:.2f}"
            )
            logger.debug(f"üìä –£—Å–ª–æ–≤–∏—è: RSI < {RSI_BUY_THRESHOLD} = {rsi < RSI_BUY_THRESHOLD}, "
                         f"RSI > {RSI_SELL_THRESHOLD} = {rsi > RSI_SELL_THRESHOLD}, "
                         f"MACD > Signal = {macd > signal_line}, "
                         f"MACD < Signal = {macd < signal_line}")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ –ë–î
            current_timestamp = int(time.time())
            current_minute = (current_timestamp // 60) * 60
            indicators = {
                'rsi': rsi,
                'macd': macd,
                'macd_signal': signal_line,
                'macd_hist': hist
            }
            self.save_current_indicators(symbol, current_tick_count, indicators, current_close)
            logger.debug(f"üíæ –¢–µ–∫—É—â–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î (—Ç–∏–∫ #{current_tick_count})")

            prev_macd = self.last_macd[symbol]

            buy_condition = (rsi < RSI_BUY_THRESHOLD and
                             macd > signal_line and
                             prev_macd is not None and
                             prev_macd <= signal_line)

            sell_condition = (rsi > RSI_SELL_THRESHOLD and
                              macd < signal_line and
                              prev_macd is not None and
                              prev_macd >= signal_line)

            logger.debug(f"üéØ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –£–°–õ–û–í–ò–ô –î–õ–Ø {symbol}:")
            logger.debug(f"   –¶–µ–Ω–∞: {current_close:.2f}")
            logger.debug(f"   RSI: {rsi:.2f}")
            logger.debug(f"   üìà BUY –£–°–õ–û–í–ò–Ø:")
            logger.debug(f"     RSI {rsi:.2f} < {RSI_BUY_THRESHOLD} = {rsi < RSI_BUY_THRESHOLD}")
            logger.debug(f"     MACD {macd:.4f} > Signal {signal_line:.4f} = {macd > signal_line}")
            logger.debug(f"     Prev MACD {prev_macd if prev_macd is not None else 'None'} <= Signal {signal_line:.4f} = {prev_macd is not None and prev_macd <= signal_line}")
            logger.debug(f"     üìä BUY —Å–∏–≥–Ω–∞–ª = {buy_condition}")
            logger.debug(f"   üìâ SELL –£–°–õ–û–í–ò–Ø:")
            logger.debug(f"     RSI {rsi:.2f} > {RSI_SELL_THRESHOLD} = {rsi > RSI_SELL_THRESHOLD}")
            logger.debug(f"     MACD {macd:.4f} < Signal {signal_line:.4f} = {macd < signal_line}")
            logger.debug(f"     Prev MACD {prev_macd if prev_macd is not None else 'None'} >= Signal {signal_line:.4f} = {prev_macd is not None and prev_macd >= signal_line}")
            logger.debug(f"     üìä SELL —Å–∏–≥–Ω–∞–ª = {sell_condition}")

            if prev_macd is not None:
                logger.debug(f"   üîÑ –ò–°–¢–û–†–ò–Ø –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ô:")
                logger.debug(f"     –ü—Ä–µ–¥—ã–¥—É—â–∏–π MACD: {prev_macd:.4f}")
                logger.debug(f"     –¢–µ–∫—É—â–∏–π MACD: {macd:.4f}")
                logger.debug(f"     –°–∏–≥–Ω–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è: {signal_line:.4f}")
                if prev_macd <= signal_line and macd > signal_line:
                    logger.info(f"     ‚úÖ MACD –ü–ï–†–ï–°–ï–ö –°–ò–ì–ù–ê–õ –°–ù–ò–ó–£ –í–í–ï–†–•!")
                elif prev_macd >= signal_line and macd < signal_line:
                    logger.info(f"     ‚úÖ MACD –ü–ï–†–ï–°–ï–ö –°–ò–ì–ù–ê–õ –°–í–ï–†–•–£ –í–ù–ò–ó!")
                else:
                    logger.debug(f"     ‚ùå –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –Ω–µ—Ç")
            else:
                logger.info(f"   ‚è≠Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º MACD")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ü–û–°–õ–ï –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π
            self.last_macd[symbol] = macd
            self.last_signal[symbol] = signal_line

            if buy_condition:
                logger.info(f"üöÄ –û–ë–ù–ê–†–£–ñ–ï–ù BUY –°–ò–ì–ù–ê–õ –î–õ–Ø {symbol}!")
                logger.info(f"   RSI: {rsi:.2f} < {RSI_BUY_THRESHOLD}")
                logger.info(f"   MACD: {macd:.4f} > Signal: {signal_line:.4f}")
                logger.info(f"   –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ: {prev_macd if prev_macd is not None else 'None'} ‚Üí {macd:.4f}")
                await self.open_position(symbol, 'buy')
            elif sell_condition:
                logger.info(f"üöÄ –û–ë–ù–ê–†–£–ñ–ï–ù SELL –°–ò–ì–ù–ê–õ –î–õ–Ø {symbol}!")
                logger.info(f"   RSI: {rsi:.2f} > {RSI_SELL_THRESHOLD}")
                logger.info(f"   MACD: {macd:.4f} < Signal: {signal_line:.4f}")
                logger.info(f"   –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ: {prev_macd if prev_macd is not None else 'None'} ‚Üí {macd:.4f}")
                await self.open_position(symbol, 'sell')
            else:
                logger.debug(f"üìä –°–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol} –Ω–µ—Ç")

        except TypeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–∏–ø–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {str(e)}")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {str(e)}")

    def save_current_indicators(self, symbol, tick_count, indicators, current_price):
        try:
            current_timestamp = int(time.time())  # timestamp –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            query = '''
                INSERT OR REPLACE INTO current_indicators 
                (symbol, tick_count, price, rsi, macd, macd_signal, macd_hist, updated_time)
                VALUES (?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
            '''
            params = (
                symbol,
                tick_count,
                current_price,
                indicators['rsi'],
                indicators['macd'],
                indicators['macd_signal'],
                indicators['macd_hist']
            )
            self.db.execute_query(query, params)
            logger.debug(f"üíæ –¢–µ–∫—É—â–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è {symbol} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã (tick_count={tick_count})")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {str(e)}")

    async def open_position(self, symbol, side):
        logger.info(f"üöÄ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é {side} –ø–æ {symbol}...")
        open_positions = self.db.get_open_positions(symbol)
        if open_positions:
            logger.warning(f"‚è∏ –£–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ {symbol}")
            return
        try:
            current_price = self.current_candle[symbol]['close']
            slippage = self.get_random_slippage()
            adjusted_price = current_price * slippage
            balance = self.get_account_balance()
            if balance is None:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–æ {symbol}: –±–∞–ª–∞–Ω—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            position_size = balance * POSITION_SIZE_PERCENT
            leverage = random.randint(LEVERAGE_MIN, LEVERAGE_MAX)

            # –†–∞—Å—á–µ—Ç ATR –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–∏ —Å —É—á–µ—Ç–æ–º ATR_PERIOD
            atr = self.calculate_atr(symbol)
            if atr is None:
                logger.warning(
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å ATR –¥–ª—è {symbol} —Å –ø–µ—Ä–∏–æ–¥–æ–º {ATR_PERIOD}, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è TP –∏ SL")
                tp_adjustment = TAKE_PROFIT / leverage
                sl_adjustment = STOP_LOSS / leverage
            else:
                tp_adjustment = (ATR_MULTIPLIER_TP * atr) / adjusted_price
                sl_adjustment = (ATR_MULTIPLIER_SL * atr) / adjusted_price
                logger.info(
                    f"üìä ATR –¥–ª—è {symbol} (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {ATR_PERIOD} —Å–≤–µ—á–∏): {atr:.4f}, TP Adjustment: {tp_adjustment:.4f}, SL Adjustment: {sl_adjustment:.4f}")

            if side == 'buy':
                tp_price = adjusted_price * (1 + tp_adjustment)
                sl_price = adjusted_price * (1 - sl_adjustment)
            else:
                tp_price = adjusted_price * (1 - tp_adjustment)
                sl_price = adjusted_price * (1 + sl_adjustment)

            position_data = {
                'symbol': symbol,
                'side': side,
                'entry_price': adjusted_price,
                'tp_price': tp_price,
                'sl_price': sl_price,
                'size': position_size,
                'leverage': leverage
            }
            position_id = self.db.save_position(position_data)
            logger.info(f"–û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {side} –ø–æ {symbol}")
            logger.info(f"ID –ø–æ–∑–∏—Ü–∏–∏: {position_id}")
            logger.info(f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {adjusted_price:.2f} (–±–µ–∑ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è: {current_price:.2f})")
            logger.info(f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {position_size:.2f} USDT")
            logger.info(f"–ü–ª–µ—á–æ: {leverage}x")
            logger.info(
                f"TP: {tp_price:.2f} ({tp_adjustment * 100:.4f}%), SL: {sl_price:.2f} ({sl_adjustment * 100:.4f}%)")
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {side} –ø–æ {symbol}")
            logger.info(f"üìå ID: {position_id} | –¶–µ–Ω–∞: {adjusted_price:.2f}")
            logger.info(f"üíµ –†–∞–∑–º–µ—Ä: {position_size:.2f} USDT | –ü–ª–µ—á–æ: {leverage}x")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {str(e)}")

    async def monitor_positions(self, symbol, last_price):
        logger.debug(f"üëÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è {symbol}...")
        open_positions = self.db.get_open_positions(symbol)
        if not open_positions:
            logger.debug(f"üîÑ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –ø–æ {symbol}")
            return
        slippage = self.get_random_slippage()
        adjusted_price = last_price * slippage
        for position in open_positions:
            position_id = position[0]
            side = position[2]
            tp_price = position[4]
            sl_price = position[5]
            if side == 'buy':
                if adjusted_price >= tp_price:
                    await self.close_position(position_id, adjusted_price, 'take_profit')
                elif adjusted_price <= sl_price:
                    await self.close_position(position_id, adjusted_price, 'stop_loss')
            else:
                if adjusted_price <= tp_price:
                    await self.close_position(position_id, adjusted_price, 'take_profit')
                elif adjusted_price >= sl_price:
                    await self.close_position(position_id, adjusted_price, 'stop_loss')
            logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(open_positions)} –ø–æ–∑–∏—Ü–∏–π")

    async def close_position(self, position_id, exit_price, close_reason):
        logger.info(f"üõë –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {position_id}...")
        try:
            success = self.db.close_position(position_id, exit_price, close_reason)
            if success:
                cursor = self.db.execute_query("SELECT * FROM positions WHERE id = ?", (position_id,))
                position = cursor.fetchone()
                logger.info(f"–ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {position_id} –ø–æ {position[1]}")
                logger.info(f"–ü—Ä–∏—á–∏–Ω–∞: {close_reason}")
                logger.info(f"–°—Ç–æ—Ä–æ–Ω–∞: {position[2]}")
                logger.info(f"–í—Ö–æ–¥: {position[3]:.2f}, –í—ã—Ö–æ–¥: {exit_price:.2f}")
                logger.info(f"PnL: {position[11]:.2%}, –ê–±—Å–æ–ª—é—Ç–Ω—ã–π PnL: {position[12]:.2f} USDT")
                self.balance += position[12]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {str(e)}")

    async def connect_websocket(self):
        self.ws = CustomWebSocket(SYMBOLS, self.handle_tick, loop)
        self.ws.start()

    async def load_initial_data(self):
        min_candles_required = MACD_SLOW + MACD_SIGNAL + 30  # 16 + 7 + 30 = 53 —Å–≤–µ—á–∏
        for symbol in self.symbols:
            try:
                logger.info(f"üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {symbol} –Ω–∞ –±–∏—Ä–∂–µ OKX...")
                url_instruments = "https://www.okx.com/api/v5/public/instruments"
                params_instruments = {'instType': INSTRUMENT_TYPE}
                response = requests.get(url_instruments, params=params_instruments, timeout=10)
                response.raise_for_status()
                instruments_data = response.json()
                if instruments_data.get('code') != '0':
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ API OKX –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {instruments_data.get('msg')}")
                    raise Exception(f"Instrument check error: {instruments_data.get('msg')}")
                inst_ids = [inst['instId'] for inst in instruments_data.get('data', [])]
                if symbol not in inst_ids:
                    logger.error(f"‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ SPOT-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ OKX")
                    raise Exception(f"Instrument {symbol} not found")
                logger.info(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {symbol} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")
                logger.info(f"üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {min_candles_required} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}...")
                url = "https://www.okx.com/api/v5/market/candles"  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ /market/candles –¥–ª—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                candles = []
                remaining = min_candles_required
                before = None  # –î–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                while remaining > 0:
                    params = {
                        'instId': symbol,
                        'bar': TIMEFRAME,
                        'limit': str(min(remaining, 300)),  # –ú–∞–∫—Å. –ª–∏–º–∏—Ç –¥–ª—è /candles - 300
                    }
                    if before:
                        params['before'] = before  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞–Ω—å—à–µ —ç—Ç–æ–≥–æ ts
                    response = requests.get(url, params=params, timeout=10)
                    response.raise_for_status()
                    data = response.json()
                    if data.get('code') != '0':
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API OKX: {data.get('msg')}")
                        raise Exception(f"API error: {data.get('msg')}")
                    fetched_candles = data.get('data', [])
                    logger.info(f"üîé –ü–æ–ª—É—á–µ–Ω–æ {len(fetched_candles)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
                    if not fetched_candles:
                        break
                    candles.extend(fetched_candles)
                    remaining -= len(fetched_candles)
                    if remaining > 0:
                        before = fetched_candles[-1][0]  # ts –ø–æ—Å–ª–µ–¥–Ω–µ–π (—Å–∞–º–æ–π —Å—Ç–∞—Ä–æ–π) —Å–≤–µ—á–∏
                if len(candles) < min_candles_required:
                    logger.warning(
                        f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(candles)} —Å–≤–µ—á–µ–π < {min_candles_required}, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
                    current_time = int(time.time())
                    for i in range(min_candles_required - len(candles)):
                        candle = {
                            'timestamp': current_time - 300 * (i + 1),
                            'open': 50000 + random.uniform(-50, 50),
                            'high': 50050 + random.uniform(-50, 50),
                            'low': 49950 + random.uniform(-50, 50),
                            'close': 50000 + random.uniform(-50, 50),
                            'volume': random.uniform(0.1, 1.0)
                        }
                        self.db.save_minute_data(symbol, candle)
                        self.data[symbol] = pd.concat([self.data[symbol], pd.DataFrame([candle])], ignore_index=True)
                        logger.debug(
                            f"üïØÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Å–≤–µ—á–∞ –¥–ª—è {symbol}: timestamp={candle['timestamp']}, close={candle['close']:.2f}")
                else:
                    df = pd.DataFrame(candles, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume', 'volCcy',
                                                        'volCcyQuote', 'confirm'])
                    df = df[['timestamp', 'open', 'high', 'low', 'close', 'volume']]
                    df = df.astype({
                        'timestamp': int,
                        'open': float,
                        'high': float,
                        'low': float,
                        'close': float,
                        'volume': float
                    })
                    df['timestamp'] = df['timestamp'].div(1000).astype(int)
                    df = df.sort_values('timestamp')
                    self.data[symbol] = pd.concat([self.data[symbol], df], ignore_index=True)
                    self.last_minute_time[symbol] = df['timestamp'].iloc[-1]
                    for _, row in df.iterrows():
                        candle = {
                            'timestamp': row['timestamp'],
                            'open': row['open'],
                            'high': row['high'],
                            'low': row['low'],
                            'close': row['close'],
                            'volume': row['volume']
                        }
                        self.db.save_minute_data(symbol, candle)
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è last_macd –∏ last_signal –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    closes = df['close']
                    if len(closes) >= min_candles_required:
                        rsi = self.calculate_rsi(closes)
                        macd, signal_line, hist = self.calculate_macd(closes)
                        if macd is not None:
                            self.last_macd[symbol] = macd
                            self.last_signal[symbol] = signal_line
                            logger.info(
                                f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã last_macd={macd:.4f} –∏ last_signal={signal_line:.4f} –¥–ª—è {symbol}")
                    last_candle = df.iloc[-1]
                    current_time = int(time.time())
                    dt = datetime.fromtimestamp(current_time)
                    if TIMEFRAME == "5m":
                        minute = (dt.minute // 5) * 5
                        current_candle_start = int(datetime(dt.year, dt.month, dt.day, dt.hour, minute).timestamp())
                    self.current_candle[symbol] = {
                        'timestamp': current_candle_start,
                        'open': last_candle['close'],
                        'high': last_candle['close'],
                        'low': last_candle['close'],
                        'close': last_candle['close'],
                        'volume': 0.0
                    }
                    logger.info(
                        f"üïØÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Ç–µ–∫—É—â–∞—è —Å–≤–µ—á–∞ –¥–ª—è {symbol}: timestamp={current_candle_start}, close={last_candle['close']:.2f}")
            except Exception as e:
                logger.error(f"üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {str(e)}")
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
                current_time = int(time.time())
                for i in range(min_candles_required):
                    candle = {
                        'timestamp': current_time - 300 * (i + 1),
                        'open': 50000 + random.uniform(-50, 50),
                        'high': 50050 + random.uniform(-50, 50),
                        'low': 49950 + random.uniform(-50, 50),
                        'close': 50000 + random.uniform(-50, 50),
                        'volume': random.uniform(0.1, 1.0)
                    }
                    self.db.save_minute_data(symbol, candle)
                    self.data[symbol] = pd.concat([self.data[symbol], pd.DataFrame([candle])], ignore_index=True)
                    logger.debug(
                        f"üïØÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Å–≤–µ—á–∞ –¥–ª—è {symbol}: timestamp={candle['timestamp']}, close={candle['close']:.2f}")
                self.last_minute_time[symbol] = candle['timestamp']
                self.current_candle[symbol] = {
                    'timestamp': current_time,
                    'open': candle['close'],
                    'high': candle['close'],
                    'low': candle['close'],
                    'close': candle['close'],
                    'volume': 0.0
                }
                logger.info(
                    f"üïØÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Ç–µ–∫—É—â–∞—è —Å–≤–µ—á–∞ –¥–ª—è {symbol}: timestamp={current_time}, close={candle['close']:.2f}")

    async def run(self, duration_seconds=None):
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –±–æ—Ç–∞")
        if duration_seconds:
            logger.info(f"‚è≥ –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å {duration_seconds} —Å–µ–∫")
        try:
            await self.load_initial_data()
            await asyncio.sleep(5)
            for symbol in self.symbols:
                if not self.data[symbol].empty:
                    logger.info(f"üîç –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è {symbol}")
                    await self.process_indicators(symbol)
            await self.connect_websocket()
            if duration_seconds:
                await asyncio.sleep(duration_seconds)
                logger.info("üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∏—Å—Ç–µ–∫–ª–æ")
            else:
                logger.info("‚ôæÔ∏è –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã")
                while True:
                    await asyncio.sleep(0.05)
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        finally:
            logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
            if self.ws:
                self.ws.stop()
            for symbol in self.symbols:
                open_positions = self.db.get_open_positions(symbol)
                for position in open_positions:
                    try:
                        current_price = self.current_candle[symbol]['close'] if self.current_candle[symbol] else \
                            self.data[symbol]['close'].iloc[-1]
                        slippage = self.get_random_slippage()
                        adjusted_price = current_price * slippage
                        await self.close_position(position[0], adjusted_price, 'test_timeout')
                    except IndexError:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –¥–ª—è {symbol}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ")
            logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    logger.info("üõ†Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤...")
    parser = argparse.ArgumentParser(description="–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç")
    parser.add_argument('--duration', type=int, default=86400, help='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö')
    parser.add_argument('--balance', type=float, default=INITIAL_BALANCE, help='–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ USDT')
    args = parser.parse_args()
    logger.info(f"‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞: duration={args.duration}, balance={args.balance}")
    logger.info("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞...")
    bot = TradingBot(initial_balance=args.balance)
    try:
        asyncio.run(bot.run(duration_seconds=args.duration))
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª KeyboardInterrupt")
    except Exception as e:
        logger.error(f"üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
    finally:
        logger.info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã")